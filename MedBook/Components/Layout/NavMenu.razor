@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MedBook</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView Context="viewContext">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person" aria-hidden="true"></span> @userFullName
                    </NavLink>
                </div>
                <AuthorizeView Roles="Patient">
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Patient/Home">
                            <span class="bi bi-activity" aria-hidden="true"></span> My CheckUps
                        </NavLink>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Doctor">
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Indicator/Bearings">
                            <span class="bi bi-prescription2" aria-hidden="true"></span> Indicators
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Indicator/Samples">
                            <span class="bi bi-bandaid" aria-hidden="true"></span> Samples
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Doctor/Patients">
                            <span class="bi bi-person-hearts" aria-hidden="true"></span> My Patients
                        </NavLink>
                    </div>
                </AuthorizeView>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-box-arrow-left" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-add" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-door-open" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? currentUrl;

    private string? userFullName;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                var userNameInDb = user.Claims.FirstOrDefault(x => x.Type == "FullName")?.Value;
                userFullName = userNameInDb!.Length > 20 ? userNameInDb.Substring(0, 20) : userNameInDb;
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

