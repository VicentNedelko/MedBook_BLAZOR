@using Business.DTO
@using DAL.Enum

@rendermode InteractiveServer

<!-- Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">@Header</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4" style="text-align:right">
                            <label>Name</label>
                        </div>
                        <div class="col-md-8">
                            <InputText @bind-Value="InputModel!.Name" class="form-control" aria-required="true" />
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-md-4" style="text-align:right">
                            <label>Type</label>
                        </div>
                        <div class="col-md-8">
                            <label>@(InputModel.Type == IndTYPE.VALUE ? "Digital value" : "YES/NO")</label>
                        </div>
                    </div>
                    <hr />
                    @if (isDigitalIndicator)
                    {
                        <div class="row">
                            <div class="col-md-4" style="text-align:right">
                                <label>Reference</label>
                            </div>
                            <div class="col-md-2">
                                <InputNumber @bind-Value="InputModel!.ReferenceMin" class="form-control" aria-required="true" disabled="true" />
                            </div>
                            <div class="col-md-2">
                                <InputNumber @bind-Value="InputModel!.ReferenceMax" class="form-control" aria-required="true" disabled="true" />
                            </div>
                            <div class="col-md-4">
                                <InputText @bind-Value="InputModel!.Unit" class="form-control" aria-required="true" disabled="true" />
                            </div>
                        </div>
                        <hr />
                    }
                    else
                    {
                        InputModel.ReferenceMin = null;
                        InputModel.ReferenceMax = null;
                        InputModel.Unit = null;
                    }
                    <div class="row">
                        <div class="col-md-4" style="text-align:right">
                            <label>Bearing</label>
                        </div>
                        <div class="col-md-8">
                            <InputSelect id="type" @bind-Value="InputModel.BearingIndicatorId" @bind-Value:after="FillIndicatorParameters" class="form-select" aria-required="true" placeholder="Select bearing">
                                <option value=null selected disabled>Select bearing indicator</option>
                                @foreach (var bi in BearingIndicatorDtos)
                                {
                                    <option value=@bi.Id>@bi.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => showModal = false">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await OnUpdateSampleIndicator(InputModel)">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Header { get; set; } = string.Empty;

    [Parameter]
    public List<BearingIndicatorDto> BearingIndicatorDtos { get; set; }

    [Parameter]
    public EventCallback<SampleIndicatorDto> EditSampleIndicator { get; set; }

    private SampleIndicatorDto InputModel { get; set; } = new();

    private bool showModal;

    private bool isDigitalIndicator;

    public void Show(SampleIndicatorDto indicatorDto)
    {
        InputModel = indicatorDto;
        showModal = true;
        isDigitalIndicator = indicatorDto.Type == IndTYPE.VALUE ? true : false;
        StateHasChanged();
    }

    private void IsDigitalValue() => isDigitalIndicator = InputModel.Type == IndTYPE.VALUE ? true : false;

    private async Task OnUpdateSampleIndicator(SampleIndicatorDto indicatorDto)
    {
        showModal = false;
        await EditSampleIndicator.InvokeAsync(indicatorDto);
    }

    private void FillIndicatorParameters()
    {
        var bearing = BearingIndicatorDtos.FirstOrDefault(bi => bi.Id == InputModel.BearingIndicatorId);
        if (bearing != null)
        {
            InputModel.Unit = bearing.Unit;
            InputModel.ReferenceMax = bearing.ReferenceMax;
            InputModel.ReferenceMin = bearing.ReferenceMin;
        }
    }
}
