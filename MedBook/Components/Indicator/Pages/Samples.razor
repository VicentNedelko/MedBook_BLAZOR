@page "/Indicator/Samples"
@attribute [Authorize(Roles = "Doctor")]

@using AutoMapper.QueryableExtensions
@using Business.DTO
@using Business.Enum
@using Business.Services
@using DAL.Data
@using DAL.Enum
@using MedBook.Requests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using AutoMapper
@using MedBook.Components.Layout

@implements IDisposable

@rendermode InteractiveServer

@inject ToastService ToastService
@inject IMediator Mediator
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IMapper Mapper
@inject ILogger<Samples> Logger

<PageTitle>Sample Indicator</PageTitle>

<Toast />

<SampleModal @ref="sampleModal" EditSampleIndicator="UpdateSampleIndicator" BearingIndicatorDtos="bearingIndicators" Header="Edit sample indicator" />

<DeleteModal @ref="deleteModal" DeleteSampleIndicator="DeleteSampleIndicator" Header="Delete sample indicator" />

<div class="row">
    <div class="col-md-4">
        <EditForm Model="InputModel" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="AddNewSampleIndicatorAsync" FormName="addNewSampleIndicator">
            <DataAnnotationsValidator />
            <h3>Create a new sample indicator.</h3>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText id="name" @bind-value="InputModel.Name" class="form-control" aria-required="true" />
                <label for="name">Name</label>
                <ValidationMessage For="() => InputModel.Name" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect id="type" @bind-Value="InputModel.BearingIndicatorId" @bind-Value:after="FillIndicatorParameters" class="form-select" aria-required="true" placeholder="Select bearing">
                    <option value=null selected disabled>Select bearing indicator</option>
                    @foreach (var bi in bearingIndicators)
                    {
                        <option value=@bi.Id>@bi.Name</option>
                    }
                </InputSelect>
                <label for="bearing">Bearing indicator</label>
                <ValidationMessage For="() => InputModel.BearingIndicatorId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="name" @bind-value="bearingModel.Unit" class="form-control" disabled="true" />
                <label for="name">Unit</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber id="name" @bind-value="bearingModel.ReferenceMax" class="form-control" disabled="true" />
                <label for="name">Reference MAX</label>
            </div>
            <div class="form-floating mb-3">
                <InputNumber id="name" @bind-value="bearingModel.ReferenceMin" class="form-control" disabled="true" />
                <label for="name">Reference MIN</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="name" @bind-value="bearingModel.Description" class="form-control" disabled="true" />
                <label for="name">Description</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@isButtonDisable">Add indicator</button>
        </EditForm>
    </div>
    <div class="col-md-8">
        <div class="row">
            <div class="col-md-6">
                <h3>Sample indicators</h3>
            </div>
            <div class="col-md-6">
                <Search />
            </div>
        </div>
        <hr />
        <QuickGrid Class="table table-striped m-0" Items="sampleIndicators.AsQueryable()" Pagination="pagination">
            <PropertyColumn Property="@(si => si.Name)" Title="Name" Sortable="true" IsDefaultSortColumn InitialSortDirection="SortDirection.Ascending">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" placeholder="Indicator name" @bind:event="oninput" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Reference Min" Align="Align.Center">
                @if (context.ReferenceMin is not null)
                {
                    <span>@context.ReferenceMin</span>
                }
                else
                {
                    <span>-</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Reference Max" Align="Align.Center">
                @if (context.ReferenceMax is not null)
                {
                    <span>@context.ReferenceMax</span>
                }
                else
                {
                    <span>-</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Unit" Align="Align.Center">
                @if (context.Unit is not null)
                {
                    <span>@context.Unit</span>
                }
                else
                {
                    <span>Yes/No</span>
                }
            </TemplateColumn>
            <TemplateColumn>
                <button type="button" @onclick="async () => await OnEditIndicator(context)" class="btn btn-outline-primary">Edit</button>
            </TemplateColumn>
            <TemplateColumn>
                <button type="button" @onclick="async () => await OnDeleteIndicator(context)" class="btn btn-outline-danger">Delete</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="pagination" />
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    private SampleIndicatorDto InputModel { get; set; } = new();

    private string SearchValue = string.Empty;

    private BearingIndicatorDto bearingModel = new();

    private bool isButtonDisable = true;

    public SampleModal sampleModal { get; set; }

    public DeleteModal deleteModal { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };

    private string nameFilter = string.Empty;

    private List<BearingIndicatorDto> bearingIndicators = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ApplicationDbContext? Context { get; set; }

    public void Dispose() => Context?.Dispose();

    protected override void OnInitialized()
    {
        Context = DbFactory.CreateDbContext();

        bearingIndicators = Context.BearingIndicators.ProjectTo<BearingIndicatorDto>(Mapper.ConfigurationProvider).ToList();
    }

    private void FillIndicatorParameters()
    {
        bearingModel = bearingIndicators.FirstOrDefault(x => x.Id == InputModel.BearingIndicatorId);
        if (bearingModel is null)
        {
            throw new ArgumentNullException(nameof(bearingModel), $"Bearing indicator Id {InputModel.BearingIndicatorId} not found.");
        }

        isButtonDisable = false;
    }

    private async Task OnEditIndicator(SampleIndicatorDto sampleIndicatorDto)
    {
        sampleModal.Show(sampleIndicatorDto);    
    }

    private async Task OnDeleteIndicator(SampleIndicatorDto sampleIndicatorDto) => deleteModal.Show(sampleIndicatorDto);

    private List<SampleIndicatorDto> sampleIndicators => string.IsNullOrEmpty(SearchValue) ?
           Context.SampleIndicators
               .AsNoTracking()
               .ProjectTo<SampleIndicatorDto>(Mapper.ConfigurationProvider)
               .ToList() :
           Context.SampleIndicators
               .AsNoTracking()
               .Where(si => si.Name.Contains(SearchValue, StringComparison.OrdinalIgnoreCase))
               .ProjectTo<SampleIndicatorDto>(Mapper.ConfigurationProvider)
               .ToList();

    private async Task AddNewSampleIndicatorAsync()
    {
        var response = await Mediator.Send(new AddSampleIndicatorRequest(InputModel));
        if (response.Status != -1)
        {
            Logger.LogInformation($"Sample indicator {InputModel.Name} added.");
            ResetForm();
            isButtonDisable = true;
            ToastService.ShowToast($"Indicator {InputModel.Name} saved successfully.", ToastLevel.Info);
        }
        else
        {
            Logger.LogInformation($"Indicator {InputModel.Name} already exists. Check indicator name and try again!");
            ToastService.ShowToast($"Indicator {InputModel.Name} already exists. Check indicator name and try again!", ToastLevel.Error);
        }
    }

    private void ResetForm()
    {
        InputModel = new();
    }

    protected async Task UpdateSampleIndicator(SampleIndicatorDto sampleIndicatorDto)
    {
        var response = await Mediator.Send(new UpdateSampleIndicatorRequest(sampleIndicatorDto));
        if (response.Status != -1)
        {
            ToastService.ShowToast($"Indicator {sampleIndicatorDto.Name} updated successfully.", ToastLevel.Info);
        }
        else
        {
            ToastService.ShowToast($"Updates indicator {sampleIndicatorDto.Name} failed!", ToastLevel.Error);
        }
    }

    protected void DeleteSampleIndicator(SampleIndicatorDto args)
    {
        throw new NotImplementedException();
    }
}
