@page "/Indicator/Samples"
@attribute [Authorize(Roles = "Doctor")]

@using AutoMapper.QueryableExtensions
@using Business.DTO
@using Business.Enum
@using Business.Services
@using DAL.Data
@using DAL.Enum
@using MedBook.Requests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using AutoMapper
@using MedBook.Components.Layout

@implements IDisposable

@rendermode InteractiveServer

@inject ToastService ToastService
@inject IMediator Mediator
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IMapper Mapper
@inject ILogger<Samples> Logger

<MudPopoverProvider />
<MudDialogProvider />
<PageTitle>Sample Indicator</PageTitle>

<Toast />

<SampleModal @ref="sampleModal" EditSampleIndicator="UpdateSampleIndicator" BearingIndicatorDtos="bearingIndicators" Header="Edit sample indicator" />

<DeleteModal @ref="deleteModal" DeleteSampleIndicator="DeleteSampleIndicator" Header="Delete sample indicator" />

<div class="row">
    <div class="col-md-4">
        <EditForm Model="InputModel" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="AddNewSampleIndicatorAsync" FormName="addNewSampleIndicator">
            <DataAnnotationsValidator />
            <h2>Create a new sample indicator.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <MudTextField id="name" @bind-value="InputModel.Name" class="form-control" aria-required="true" Label="Name" />
            <ValidationMessage For="() => InputModel.Name" class="text-danger" />
            <MudSelect @bind-Value="InputModel.BearingIndicatorId"
                       @bind-Value:after="FillIndicatorParameters"
                       Placeholder="Bearings"
                       Margin="Margin.Normal">
                <MudSelectItem Disabled Value="0">Select bearing</MudSelectItem>
                @foreach (var bi in bearingIndicators)
                {
                    <MudSelectItem Value="@bi.Id">@bi.Name</MudSelectItem>
                }

            </MudSelect>
            <ValidationMessage For="() => InputModel.BearingIndicatorId" class="text-danger" />
            <MudTextField id="name" @bind-value="bearingModel.Unit" class="form-control" disabled="true" Label="Unit" />
            <MudNumericField id="name" @bind-value="bearingModel.ReferenceMax" class="form-control" disabled="true" Label="Reference Max" />
            <MudNumericField id="name" @bind-value="bearingModel.ReferenceMin" class="form-control" disabled="true" Label="Reference Min" />
            <MudTextField id="name" @bind-value="bearingModel.Description" class="form-control" disabled="true" Label="Description" />
            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@isButtonDisable">Add indicator</button>
        </EditForm>
    </div>
    <div class="col-md-8">
        @if (bearingIndicators == null)
        {
            <MudOverlay Visible="true" DarkBackground="true" AutoClose="false" />
        }
        else
        {
            <MudDataGrid T="SampleIndicatorDto" Items="@sampleIndicators" Filterable="true" SortMode="@SortMode.Single" Groupable="false" QuickFilter="quickSampleFilter" 
            ReadOnly="false" EditMode="DataGridEditMode.Form" StartedEditingItem="@StartedEditingItem" EditTrigger="DataGridEditTrigger.Manual">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Sample indicators</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchSample" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <MudBlazor.PropertyColumn Property="x => x.Name" Editable="true"/>
                    <MudBlazor.PropertyColumn Property="@(x => x.Type == IndTYPE.VALUE ? "Value" : "YES/NO")" Title="Type" Editable="true">
                        <EditTemplate>
                            <MudSelect @bind-Value="context.Item.Type" Required RequiredError="You must select a Type!" Margin="@Margin.Dense">
                                <MudSelectItem Value="@IndTYPE.VALUE">Value</MudSelectItem>
                                <MudSelectItem Value="@IndTYPE.YESNO">YES/NO</MudSelectItem>
                            </MudSelect>
                        </EditTemplate>
                    </MudBlazor.PropertyColumn>
                    <MudBlazor.PropertyColumn Property="x => x.ReferenceMin" Title="Reference Min" Editable="false"/>
                    <MudBlazor.PropertyColumn Property="x => x.ReferenceMax" Title="Reference Max" Editable="false"/>
                    <MudBlazor.PropertyColumn Property="x => x.Unit" Title="Unit" Editable="false"/>
                    <TemplateColumn StickyRight="true">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="@context.Actions.StartEditingItemAsync" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="SampleIndicatorDto" />
                </PagerContent>
            </MudDataGrid>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    private SampleIndicatorDto InputModel { get; set; } = new();

    private string SearchValue = string.Empty;

    private BearingIndicatorDto bearingModel = new();

    private bool isButtonDisable = true;

    private SampleModal sampleModal { get; set; }

    public DeleteModal deleteModal { get; set; }

    private string searchSample = string.Empty;

    private List<BearingIndicatorDto> bearingIndicators;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ApplicationDbContext? Context { get; set; }

    public void Dispose() => Context?.Dispose();

    protected override void OnInitialized()
    {
        Context = DbFactory.CreateDbContext();

        bearingIndicators = Context.BearingIndicators.ProjectTo<BearingIndicatorDto>(Mapper.ConfigurationProvider).ToList();
    }

    private void FillIndicatorParameters()
    {
        bearingModel = bearingIndicators.FirstOrDefault(x => x.Id == InputModel.BearingIndicatorId);
        if (bearingModel is null)
        {
            throw new ArgumentNullException(nameof(bearingModel), $"Bearing indicator Id {InputModel.BearingIndicatorId} not found.");
        }

        isButtonDisable = false;
    }

    private void StartedEditingItem(SampleIndicatorDto sampleIndicatorDto)
    {
        var item = sampleIndicatorDto;
    }

    private List<SampleIndicatorDto> sampleIndicators => string.IsNullOrEmpty(SearchValue) ?
           Context.SampleIndicators
               .AsNoTracking()
               .ProjectTo<SampleIndicatorDto>(Mapper.ConfigurationProvider)
               .ToList() :
           Context.SampleIndicators
               .AsNoTracking()
               .Where(si => si.Name.Contains(SearchValue, StringComparison.OrdinalIgnoreCase))
               .ProjectTo<SampleIndicatorDto>(Mapper.ConfigurationProvider)
               .ToList();

    private async Task AddNewSampleIndicatorAsync()
    {
        var response = await Mediator.Send(new AddSampleIndicatorRequest(InputModel));
        if (response.Status != -1)
        {
            Logger.LogInformation($"Sample indicator {InputModel.Name} added.");
            ResetForm();
            isButtonDisable = true;
            ToastService.ShowToast($"Indicator {InputModel.Name} saved successfully.", ToastLevel.Info);
        }
        else
        {
            Logger.LogInformation($"Indicator {InputModel.Name} already exists. Check indicator name and try again!");
            ToastService.ShowToast($"Indicator {InputModel.Name} already exists. Check indicator name and try again!", ToastLevel.Error);
        }
    }

    private void ResetForm()
    {
        InputModel = new();
        bearingModel = new();
        isButtonDisable = true;
    }

    private Func<SampleIndicatorDto, bool> quickSampleFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchSample)) return true;
        if (x.Name.Contains(searchSample, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    };

    private void UpdateSampleIndicator(SampleIndicatorDto args)
    {
        throw new NotImplementedException();
    }

    private void DeleteSampleIndicator(SampleIndicatorDto args)
    {
        throw new NotImplementedException();
    }
}
